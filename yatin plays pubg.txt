Yatin plays PUBG:
Yatin is playing PUBG and he has reached a place with a large staircase in front of him.
And there is an enemy at each landing of the staircase.
The staircase is analogous to a binary tree with each of its nodes as a landing of the
staircase and each of its edges as stairs from one landing to another.

Yatin wants to kill the maximum possible number of enemies. He can kill every person
he can see from his position with his suppressed sniper gun. But he can see only the
persons at the leftmost standing at each level and cannot see the rest.
Before starting shooting them, he wants to know how many persons he can kill. He is
busy keeping an eye on the enemies. So he wants you to find out the maximum
number of people he can kill from that location by providing you with the analogous
a binary search tree.

Input Format:
The first line of input contains a number t denoting the number of test cases.
The first line of each test case contains n, the number of nodes in the tree.
The second line of each test case contains n space separated integers (unique) ai
denoting the value at each node of the BST.


Output Format:
Print the answer for each test case on a new line.

Constraints:
1 <= t <= 20
1 <= n <= 1000
1 <= ai <= 1000000000

Answer:
#include<iostream>

#include<cmath>

using namespace std;

struct bst
{

int data;

bst *left;

bst *right;

};

bst* insert(bst *root, int x)
{

if(root==0)
{

bst *root=new bst();

root->data=x;

root->left=root->right=0;

return root;

}

if(x<=root->data)

root->left=insert(root->left,x);

else if(x>root->data)

root->right=insert(root->right,x);

return root;

}
int max_kill(bst *root)
{

if(root==0)
return -1;

return max(max_kill(root->left),max_kill(root->right))+1;

}

int main()
{

int t,n,x;

cin>>t;

for(int j=1; j<=t; j++)
{

cin>>n;

bst *root=0;

for(int i=1; i<=n; i++)
{

cin>>x;

root=insert(root,x);

}

int result=max_kill(root)+1;

if(result==-1)

cout<<"0";

else

cout<<result;

cout<<endl;

}

return 0

}

Input:
1
9
8 3 10 1 6 14 4 7 13

Output:
4